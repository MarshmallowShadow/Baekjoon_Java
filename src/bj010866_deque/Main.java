package bj010866_deque;

/* 10866번: 덱 (https://www.acmicpc.net/problem/10866)

정수를 저장하는 덱(Deque)를 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.

명령은 총 여덟 가지이다.

    push_front X: 정수 X를 덱의 앞에 넣는다.
    push_back X: 정수 X를 덱의 뒤에 넣는다.
    pop_front: 덱의 가장 앞에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
    pop_back: 덱의 가장 뒤에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
    size: 덱에 들어있는 정수의 개수를 출력한다.
    empty: 덱이 비어있으면 1을, 아니면 0을 출력한다.
    front: 덱의 가장 앞에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
    back: 덱의 가장 뒤에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.

입력: 첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다.
	문제에 나와있지 않은 명령이 주어지는 경우는 없다.

출력: 출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.

*/

import java.util.*;
import java.io.*;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		List<Integer> deque = new ArrayList<>();
		int N = Integer.parseInt(br.readLine());
		
		for(int i=0; i<N; i++) {
			String comm[] = br.readLine().split(" ");
			if(comm[0].equals("push_front")) {
				pushFront(deque, Integer.parseInt(comm[1]));
			} else if(comm[0].equals("push_back")) {
				pushBack(deque, Integer.parseInt(comm[1]));
			} else if(comm[0].equals("pop_front")) {
				bw.write(Integer.toString(popFront(deque)));
				bw.newLine();
			} else if(comm[0].equals("pop_back")) {
				bw.write(Integer.toString(popBack(deque)));
				bw.newLine();
			} else if(comm[0].equals("front")) {
				bw.write(Integer.toString(front(deque)));
				bw.newLine();
			} else if(comm[0].equals("back")) {
				bw.write(Integer.toString(back(deque)));
				bw.newLine();
			} else if(comm[0].equals("empty")) {
				bw.write(Integer.toString(empty(deque)));
				bw.newLine();
			} else {
				bw.write(Integer.toString(size(deque)));
				bw.newLine();
			}
		}
		
		bw.flush();
	}
	
	public static void pushFront(List<Integer> deque, int X) {
		deque.add(X);
	}
	public static void pushBack(List<Integer> deque, int X) {
		deque.add(0, X);
	}
	public static int popFront(List<Integer> deque) {
		if(deque.size() == 0) {
			return -1;
		}
		int x = deque.get(deque.size()-1);
		deque.remove(deque.size()-1);
		return x;
	}
	public static int popBack(List<Integer> deque) {
		if(deque.size() == 0) {
			return -1;
		}
		int x = deque.get(0);
		deque.remove(0);
		return x;
	}
	public static int size(List<Integer> deque) {
		return deque.size();
	}
	public static int empty(List<Integer> deque) {
		if(deque.size() == 0) {
			return 1;
		} else {
			return 0;
		}
	}
	public static int front(List<Integer> deque) {
		if(deque.size() == 0) {
			return -1;
		}
		return deque.get(deque.size()-1);
	}
	public static int back(List<Integer> deque) {
		if(deque.size() == 0) {
			return -1;
		}
		return deque.get(0);
	}
}
